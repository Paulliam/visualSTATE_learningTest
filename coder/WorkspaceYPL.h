/*****************************************************************************
* IAR Visual State Coder Generated Header File
* Generated by IAR Visual State 9.1.1.3863
* IAR Visual State Project File: <E:\work_ypl\1_WirelessSwitchboard\3sourcecode\visualSTATE\WorkspaceYPL.vsp>
* IAR Visual State Signature Generator: "81"
* Project Signature: "e89ff9e42730e866831d14f94a50bad8"
*****************************************************************************/


#ifndef WORKSPACEYPL_H
#define WORKSPACEYPL_H


/** @file
    Project header file.
    Contains various macros, types, and function declarations for the 
    project functions.
*/



/* *** include directives *** */


#include <limits.h>
#include <stddef.h>
#include <stdarg.h>


/* *** type definitions *** */


/* Variable types */

typedef int VS_BOOL;
typedef unsigned char VS_UCHAR;
typedef signed char VS_SCHAR;
typedef char VS_CHAR;
typedef unsigned int VS_UINT;
typedef signed int VS_INT;
typedef float VS_FLOAT;
typedef double VS_DOUBLE;

#if (UCHAR_MAX >= 0x0ff)
typedef unsigned char VS_UINT8;
typedef signed char VS_INT8;
#elif (USHRT_MAX >= 0x0ff)
typedef unsigned short VS_UINT8;
typedef signed short VS_INT8;
#elif (UINT_MAX >= 0x0ff)
typedef unsigned int VS_UINT8;
typedef signed int VS_INT8;
#elif (ULONG_MAX >= 0x0ff)
typedef unsigned long VS_UINT8;
typedef signed long VS_INT8;
#else
#define VS_UINT8 (unsupported data type)
#define VS_INT8 (unsupported data type)
#endif

typedef VS_INT VS_UINT16_VAARG;
typedef VS_INT VS_INT16_VAARG;
#if (UCHAR_MAX >= 0x0ffff)
typedef unsigned char VS_UINT16;
typedef signed char VS_INT16;
#elif (USHRT_MAX >= 0x0ffff)
typedef unsigned short VS_UINT16;
typedef signed short VS_INT16;
#elif (UINT_MAX >= 0x0ffff)
typedef unsigned int VS_UINT16;
typedef signed int VS_INT16;
#elif (ULONG_MAX >= 0x0ffff)
typedef unsigned long VS_UINT16;
typedef signed long VS_INT16;
typedef VS_INT VS_UINT16_VAARG;
typedef VS_INT VS_INT16_VAARG;
#else
#define VS_UINT16 (unsupported data type)
#define VS_INT16 (unsupported data type)
#endif

typedef VS_INT VS_UINT32_VAARG;
typedef VS_INT VS_INT32_VAARG;
#if (UCHAR_MAX >= 0x0ffffffff)
typedef unsigned char VS_UINT32;
typedef signed char VS_INT32;
#elif (USHRT_MAX >= 0x0ffffffff)
typedef unsigned short VS_UINT32;
typedef signed short VS_INT32;
#elif (UINT_MAX >= 0x0ffffffffUL)
typedef unsigned int VS_UINT32;
typedef signed int VS_INT32;
#elif (ULONG_MAX >= 0x0ffffffffUL)
typedef unsigned long VS_UINT32;
typedef signed long VS_INT32;
typedef VS_INT32 VS_UINT32_VAARG;
typedef VS_INT32 VS_INT32_VAARG;
#else
#define VS_UINT32 (unsupported data type)
#define VS_INT32 (unsupported data type)
#endif

/* API types */

typedef VS_UINT8 VSTriggerType;

typedef VS_UINT8 VSDBExprType;

typedef VS_UINT8 VSGuardExprType;

typedef VS_UINT8 VSActionExprType;

typedef VS_UINT8 VSInstanceType;

typedef VS_UINT8 VSStateType;

typedef VS_UINT8 VSDestinationStateType;

typedef VS_UINT8 VSMachineType;

typedef VS_UINT8 VSSignalQueueType;

typedef VS_UINT8 VSVariableType;

typedef VS_UINT8 VSEventParameterType;


/* *** type definitions *** */


typedef struct VSSystemClassTag VSSystemClass;

typedef struct VSSystemObjectTag VSSystemObject;

/* Function pointer types */

typedef void (* VSActionExprFunctionType) (void);

/* System class types */

struct VSSystemClassTag
{
  VS_UINT8   transIndexIndex[5];
  VS_UINT8   transIndex[6];
  VS_UINT8   trans[26];
  VS_UINT8   machineInitDestState[2];
  VS_UINT8   machineInitTrans[2];
  VS_UINT8   stateParentMachines[5];
};

/* System object types */

struct VSSystemObjectTag
{
  VS_UINT8   currentState[2];
  VS_UINT8   activeMachineBits[1];
  VS_UINT8   workingState[2];
  VS_UINT8   transIndexIndex;
  VS_UINT8   lastTransIndexIndex;
  VS_UINT8   headerTransIndex;
  VS_UINT8   transIndex;
  VS_UINT8   transitionHeaderWordIndex;
  VS_UINT8   transitionDataIndex;
  VS_UINT8   state;
  VS_UINT8   machine;
  VS_UINT8   firstMachine;
  VS_UINT8   lastMachine;
  VS_UINT8   firstLastMachine;
  VS_BOOL    wasLastFiredTransreactionAnInternalReaction;
};

/* *** API return codes *** */

typedef enum VSRCTag {
  VSRC_OK = 0,
  VSRC_EventActive = 1,
  VSRC_RangeError = 2,
  VSRC_CannotAllocateMemory = 3,
  VSRC_Conflict = 4,
  VSRC_SignalQueueOverflow = 5,
} VSRC;


/* *** constants *** */


/* API constants */
#define VSMachineUndefined 0x0ffU
#define VSStateUndefined 0x0ffU


/* *** function declarations *** */


/** Initializes a system object. This function is enabled when system 
    objects are statically allocated. If the project contains a single 
    system, the function initializes the single statically allocated system 
    object. If the project contains multiple systems, the function 
    initializes the statically allocated system object for the specified 
    system class and returns a pointer to that system object. The function 
    should only be called once for each system class; multiple calls to this 
    function with the same system class cause undefined behavior.

    @return
      Returns a return code of type VSRC indicating whether the 
      function completed successfully.
*/
extern VSRC VSInitAll (void);

/** Reinitializes the active internal instance. This function is enabled on 
    demand. The function reinitializes the active internal instance within 
    the specified system object. The state of the internal instance is the 
    same as after a call to VSInitAll or VSNew. The system object must be 
    initialized, otherwise the behavior of the function is undefined.The 
    function is useful for reuse of an internal instance in several cases: 
    1) An internal instance has failed with a detected conflict or signal 
    queue overflow. 2) A set of internal instances within a system object is 
    used as a pool available for reuse in user-written code.

    @return
      Returns a return code of type VSRC indicating whether the 
      function completed successfully.
*/
extern VSRC VSReinitialize (void);

/** Deducts an event. This function is always enabled. The function performs 
    a macro step for the supplied event for the specified system object.

    @param eventNoArg
      Event number to be deducted.

    @return
      Returns a return code of type VSRC indicating whether the 
      function completed successfully.
*/
extern VSRC VSDeduct (VSTriggerType eventNoArg);


#endif
